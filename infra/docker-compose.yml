version: '3.8'

services:
  # Message Broker - Redpanda (Kafka-compatible)
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.3.5
    container_name: wcd-redpanda
    command:
      - redpanda
      - start
      - --smp
      - '1'
      - --reserve-memory
      - 0M
      - --overprovisioned
      - --node-id
      - '0'
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr
      - PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wcd-network

  # Redis - In-memory data store
  redis:
    image: redis:7-alpine
    container_name: wcd-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - wcd-network

  # Ingest Service
  ingest-service:
    build:
      context: ../backend
      dockerfile: ingest-service/Dockerfile
    container_name: wcd-ingest
    ports:
      - "8081:8081"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:29092
      - WCD_API_KEY=dev-secret-key
    depends_on:
      redpanda:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wcd-network

  # Projector Service
  projector-service:
    build:
      context: ../backend
      dockerfile: projector-service/Dockerfile
    container_name: wcd-projector
    ports:
      - "8082:8082"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redpanda:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wcd-network

  # Query Service
  query-service:
    build:
      context: ../backend
      dockerfile: query-service/Dockerfile
    container_name: wcd-query
    ports:
      - "8083:8083"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8083/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wcd-network

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.51.0
    container_name: wcd-prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - wcd-network

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:10.4.1
    container_name: wcd-grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - wcd-network

  # Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: wcd-frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_API_BASE=http://localhost
      - VITE_INGEST_PORT=8081
      - VITE_QUERY_PORT=8083
      - VITE_API_KEY=dev-secret-key
    depends_on:
      - ingest-service
      - query-service
    networks:
      - wcd-network

networks:
  wcd-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
